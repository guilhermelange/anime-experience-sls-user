// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Anime {
  id                    String                @id @default(uuid()) @db.Uuid
  name                  String                @db.VarChar
  description           String                @db.VarChar
  cover_file            String                @db.VarChar
  parental_rating       Int
  start_date            DateTime              @db.Timestamptz(6)
  created_at            DateTime              @default(now()) @db.Timestamp(6)
  updated_at            DateTime              @default(now()) @db.Timestamp(6)
  image_file            String                @db.VarChar
  playlist_link         String?               @default("") @db.VarChar
  anime_author          AnimeAuthor[]
  anime_genre           AnimeGenre[]
  anime_collection      AnimeCollection[]
  anime_user_evaluation AnimeUserEvaluation[]
  anime_user_favorites  AnimeUserFavorites[]
  season                Season[]

  @@map("anime")
}

model AnimeAuthor {
  animeId  String @db.Uuid
  authorId String @db.Uuid
  anime    Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)
  author   Author @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([animeId, authorId])
  @@map("anime_author")
}

model AnimeGenre {
  animeId String @db.Uuid
  genreId String @db.Uuid
  anime   Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([animeId, genreId])
  @@map("anime_genre")
}

model AnimeCollection {
  animeId      String     @db.Uuid
  collectionId String     @db.Uuid
  anime        Anime      @relation(fields: [animeId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([animeId, collectionId])
  @@map("anime_collection")
}

model AnimeUserEvaluation {
  evaluation Boolean
  userId     String  @db.Uuid
  animeId    String  @db.Uuid
  anime      Anime   @relation(fields: [animeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, animeId])
  @@map("anime_user_evaluation")
}

model AnimeUserFavorites {
  animeId String @db.Uuid
  userId  String @db.Uuid
  anime   Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([animeId, userId])
  @@map("anime_user_favorites")
}

model Author {
  id           String        @id @default(uuid()) @db.Uuid
  name         String        @db.VarChar
  created_at   DateTime      @default(now()) @db.Timestamp(6)
  updated_at   DateTime      @default(now()) @db.Timestamp(6)
  anime_author AnimeAuthor[]

  @@map("author")
}

model Episode {
  number        String   @db.VarChar
  name          String   @db.VarChar
  description   String   @db.VarChar
  duration      Int
  link          String   @db.VarChar
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  seasonAnimeId String   @db.Uuid
  seasonNumber  Int
  season        Season   @relation(fields: [seasonNumber, seasonAnimeId], references: [number, animeId], onDelete: NoAction, onUpdate: NoAction)

  @@id([number, seasonAnimeId, seasonNumber])
  @@map("episode")
}

model Genre {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @db.VarChar
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  anime_genre AnimeGenre[]

  @@map("genre")
}

model Season {
  name        String    @db.VarChar
  description String    @db.VarChar
  animeId     String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  number      Int
  anime       Anime     @relation(fields: [animeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  episode     Episode[]

  @@id([animeId, number])
  @@map("season")
}

model User {
  id                    String                @id @default(uuid()) @db.Uuid
  name                  String                @db.VarChar
  email                 String                @db.VarChar
  password              String                @db.VarChar
  created_at            DateTime              @default(now()) @db.Timestamp(6)
  updated_at            DateTime              @default(now()) @db.Timestamp(6)
  avatar                String?               @db.VarChar
  anime_user_evaluation AnimeUserEvaluation[]
  anime_user_favorites  AnimeUserFavorites[]

  @@map("user")
}

model Collection {
  id               String            @id @default(uuid()) @db.Uuid
  name             String            @db.VarChar
  trending         Boolean           @default(false)
  top              Top               @default(NONE)
  anime_collection AnimeCollection[]

  @@map("collection")
}

enum Top {
  NONE
  ANIME
  PLAYLIST
}